version: '3.8'

services:
    dev-container:
        image: azzazkhan/dev-container

        # First start other services which our app container depends on
        depends_on:
            - database
            - redis
            - soketi
            - phpmyadmin
            - mailhog

        # Mount repository into dev container
        volumes:
            - ../..:/workspaces:cached

        # Publish all ports on which our app will live
        ports:
            - "80:80"
            - "443:443"
            - "3000:3000"
            - "4000:4000"
            - "4200:4200"
            - "5000:5000"
            - "5001:5001"
            - "5005:5005"
            - "5173:5173"
            - "8000:8000"
            - "8080:8080"
            - "8085:8085"
            - "9000:9000"
            - "9009:9009"
            - "9199:9199"
            - "9299:9299"

        # Prevent container from exiting
        command: sleep infinity

        # For connecting with database and using internal services
        networks:
            - devcontainer

    # MySQL database for storing data
    database:
        image: mariadb:10

        # Standard MySQL port
        ports:
            - '${DB_PORT:-3306}:3306'

        # Volume for persisitent storage
        volumes:
            - mariadb:/var/lib/mysql

        # Environment variables for configuring root and database user
        environment:
            MYSQL_ROOT_PASSWORD:
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: app
            MYSQL_USER: admin
            MYSQL_PASSWORD:
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'

        # Restart the container on failure and exit (unless manully terminated)        
        restart: unless-stopped

        # Keep container alive and recreate if goes unresponsive
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-p" ]
            retries: 3
            timeout: 5s

        networks:
            - devcontainer

    # Redis for caching and queue system
    redis:
        image: 'redis:alpine'

        # Persisit cache data
        volumes:
            - redis:/data

        # Restart the container on failure and exit (unless manully terminated)        
        restart: unless-stopped

        # Keep container alive and recreate if goes unresponsive
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            retries: 3
            timeout: 5s

        networks:
            - devcontainer

    # Websockets server for realtime messaging
    soketi:
        image: 'quay.io/soketi/soketi:latest-16-alpine'

        # Make sure dependent services are created before this
        depends_on:
            - redis

        # Restart the container on failure and exit (unless manully terminated)        
        restart: unless-stopped

        # Debugging and queue configuration
        environment:
            SOKETI_DEBUG: '1'
            SOKETI_METRICS_ENABLED: '1'
            SOKETI_METRICS_SERVER_PORT: '9601'
            SOKETI_DB_REDIS_HOST: redis
            SOKETI_DB_REDIS_PORT: '6001'

        networks:
            - devcontainer

    # phpMyAdmin for database management
    phpmyadmin:
        image: phpmyadmin

        # Make sure dependent services are created before this
        depends_on:
            - database

        # PMA user configuration
        environment:
            PMA_HOST: database
            PMA_USER: root

        # Restart the container on failure and exit (unless manully terminated)        
        restart: unless-stopped

        networks:
            - devcontainer

    # Mailhog for email testing
    mailhog:
        image: 'mailhog/mailhog'

        networks:
            - devcontainer

networks:
    devcontainer:


volumes:
    database:
    redis:
